{
  "name": "express-bouncer",
  "version": "0.1.3",
  "license": "Zlib",
  "main": "bouncer.js",
  "description": "Express middleware for mitigating brute-force attacks",
  "contributors": [
    {
      "name": "David Krutsko",
      "email": "dave@krutsko.net",
      "url": "dave.krutsko.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dkrutsko/express-bouncer.git"
  },
  "bugs": {
    "url": "https://github.com/dkrutsko/express-bouncer/issues"
  },
  "keywords": [
    "brute",
    "force",
    "attack",
    "mitigation",
    "middleware",
    "security"
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "# Express Bouncer\r\n[![Build Status](https://travis-ci.org/dkrutsko/express-bouncer.png)](https://travis-ci.org/dkrutsko/express-bouncer)\r\n[![NPM version](https://badge.fury.io/js/express-bouncer.png)](https://badge.fury.io/js/express-bouncer)\r\n\r\n<p align=\"justify\">A simple and standalone middleware for <a href=\"https://github.com/visionmedia/express\">express</a> routes which attempts to mitigate brute-force attacks. It works by increasing the delay with each failed request using a Fibonacci formula. Requests are tracking via IP address and can be white-listed or reset on demand. All logged addresses are stored locally in an object and dormant addresses are removed automatically. Error messages are also completely customizable. This project is based on <a href=\"https://github.com/AdamPflug/express-brute\">express-brute</a> created by <a href=\"https://github.com/AdamPflug\">Adam Pflug</a>.</p>\r\n\r\n### Installation\r\n```shell\r\n$ npm install express-bouncer\r\n```\r\n\r\n### Quick Start\r\n```js\r\n// Creates a new instance of our bouncer (args optional)\r\nvar bouncer = require (\"express-bouncer\")(500, 900000);\r\n\r\n// Add white-listed addresses (optional)\r\nbouncer.whitelist.push (\"127.0.0.1\");\r\n\r\n// In case we want to supply our own error (optional)\r\nbouncer.blocked = function (req, res, next, remaining)\r\n{\r\n\tres.send (403, \"Too many requests have been made, \" +\r\n\t\t\"please wait \" + remaining / 1000 + \" seconds\");\r\n};\r\n\r\n// Route we wish to protect with bouncer middleware\r\napp.post (\"/login\", bouncer.block, function (req, res)\r\n{\r\n\tif (LoginFailed)\r\n\t{\r\n\t\t// Login failed\r\n\t}\r\n\r\n\telse\r\n\t{\r\n\t\tbouncer.reset (req);\r\n\t\t// Login succeeded\r\n\t}\r\n});\r\n\r\n// Clear all logged addresses\r\n// (Usually never really used)\r\nbouncer.addresses = { };\r\n```\r\n\r\n### Documentation\r\n#### Constructor\r\n```js\r\nexpress-bouncer ([min], [max], [free])\r\n```\r\n* **min** The minimum number of milliseconds the user can be forced to wait. *(default: 500 ms)*\r\n* **max** The maximum number of milliseconds the user can be forced to wait. *(default: 10 min)*\r\n* **free** The number of attempts a user can make before being forced to wait. *(default: 2)*\r\n\r\n#### Functions\r\n* **reset** Resets the wait time between attempts for the specified request.\r\n* **block** Middleware that will block requests which are occurring too often.\r\n\r\n#### Properties\r\n* **addresses** A list of logged IP addresses. Cleared by overriding with new object.\r\n* **whitelist** A list of white-listed IP addresses. These addresses will never be blocked.\r\n* **blocked** Function to be called when a request has been blocked. *(see quick start)*\r\n\r\n### Author\r\n* Email: <dave@krutsko.net>\r\n* Home: [dave.krutsko.net](http://dave.krutsko.net)\r\n* GitHub: [github.com/dkrutsko](https://github.com/dkrutsko)",
  "readmeFilename": "README.md",
  "_id": "express-bouncer@0.1.3",
  "dist": {
    "shasum": "57f9b823e331de0fbc8566a6914e0df50f7a8fea"
  },
  "_from": "express-bouncer@",
  "_resolved": "https://registry.npmjs.org/express-bouncer/-/express-bouncer-0.1.3.tgz"
}
